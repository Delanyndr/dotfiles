#+title: Jake's Emacs Config
#+property: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Package Manager

  #+begin_src emacs-lisp

    (require 'package)

    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/"))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; ensure use-package is installed
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-hook-name-suffix nil)

  #+end_src

* Base Configuration
** Font

#+begin_src emacs-lisp

  (defvar jake/font-size 10)

  (set-face-attribute 'default nil :font "Source Code Pro" :height (* jake/font-size 10))

#+end_src

** Theme

#+begin_src emacs-lisp

  (load-theme 'adwaita t)

#+end_src

** UI Elements

#+begin_src emacs-lisp

  (setq inhibit-startup-message t
        ring-bell-function 'ignore
        vc-follow-symlinks t)

  (fset 'yes-or-no-p 'y-or-n-p)

  (scroll-bar-mode -1)
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (show-paren-mode 1)

#+end_src

** Line Numbers

#+begin_src emacs-lisp

  (column-number-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Delete Trailing Whitespace

#+begin_src emacs-lisp

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+end_src

** Move Backup and Autosave Files

   #+begin_src emacs-lisp

     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))

   #+end_src

** Move Auto Config File

   #+begin_src emacs-lisp

     (setq custom-file "~/.emacs.d/custom.el")
     (load custom-file :noerror)

   #+end_src

* Evil Mode

  #+begin_src emacs-lisp

    (use-package evil
      :ensure t
      :config (evil-mode 1))

  #+end_src

* Org Mode

** Basic Configs

** Tempo

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src

** Babel

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))

  (defun jake/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jake/org-babel-tangle-config)))

#+end_src
