#+TITLE: Jake's Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el :mkdirp yes

* Global vars

#+begin_src emacs-lisp

  (defvar jake/font-size 10)
  (defvar jake/variable-font-size 10)

#+end_src

* Basic UI Settings

run ~org-babel-tangle~

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  ;;(setq initial-scratch-message "")
  (fset 'yes-or-no-p 'y-or-n-p)
  ;;(global-hl-line-mode)
  (setq ring-bell-function 'ignore)    ; disable visual and audio bell
  (scroll-bar-mode 0)                  ; Disable scrollbar
  (tooltip-mode 0)                     ; Disable tooltips
  (tool-bar-mode 0)                    ; Disable toolbar
  (menu-bar-mode 0)                    ; Disable menubar
  (show-paren-mode 1)                  ; Highlight matching parenthesis

  (column-number-mode t)               ; Display column numbers

  (global-display-line-numbers-mode t) ; Display line numbers

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook
                  helpful-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Automatically follow symlinks
  (setq vc-follow-symlinks t)

  ;; remove trailing whitespace on save
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

#+end_src

** Font Configuration

#+begin_src emacs-lisp
  ;; Set font (height is 1/10 pt)

  (set-face-attribute 'default nil :font "Inconsolata" :height (* jake/font-size 10))

  (set-face-attribute 'fixed-pitch nil :font "Inconsolata" :height (* jake/font-size 10))

  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height (* jake/variable-font-size 10) :weight 'regular)

#+end_src

** Move autosave and temp file outputs
#+begin_src emacs-lisp
;; save autosave and backup files in /tmp/
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

** Make Escape Quit Prompts

#+begin_src emacs-lisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Misc

#+begin_src emacs-lisp

;; set colorscheme
;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;(load-theme 'atom-one-dark t)

#+end_src

* Package Setup

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Ensure use-package is installed
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Which Key
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
#+end_src

* Keybinds

#+begin_src emacs-lisp

  (use-package general
    :after which-key
    :config
    (general-override-mode 1)

    (general-create-definer jake/leader-key
      :keymaps '(normal visual insert motion emacs)
      :prefix "SPC" ;; in normal mode
      :global-prefix "C-SPC") ;; in any mode

    (jake/leader-key
     ""   nil
     "c"  (general-simulate-key "C-c" :which-key "user")
     "h"  (general-simulate-key "C-h" :which-key "help")
     "u"  (general-simulate-key "C-u" :which-key "C-u")
     "x"  (general-simulate-key "C-x" :which-key "C-x")

     ;; Package manager
     "lp" 'list-packages

     ;; File ops
     "f"  '(:ignore t :which-key "files")
     "ff" 'counsel-find-file

     ;; toggles
     "t"  '(:ignore t :which-key "toggles")
     "tt" '(counsel-load-theme :which-key "choose theme")

     ;; Quit ops
     "q"  '(:ignore t :which-key "quit emacs")
     "qq" 'kill-emacs
     "qz" 'delete-frame

     ;; Buffer ops
     "b"  '(:ignore t :which-key "buffer")
     "bb" 'switch-to-buffer
     "bd" 'kill-this-buffer
     "bq" 'kill-buffer-and-window
     "b." 'next-buffer
     "b," 'previous-buffer

     ;; Window ops
     "w"  '(:ignore t :which-key "window")
     "wm" 'maximize-window
     "ws" 'split-window-horizontally
     "wv" 'split-window-vertically
     "ww" 'other-window
     "wc" 'delete-window
     "wo" 'delete-other-windows
     )
    )

  ;;(use-package hydra)
  ;;(defhydra hydra-text-scale (:timeout 4)
  ;;  "scale text"
  ;;  ("j" text-scale-increase "in")
  ;;("k" text-scale-decrease "out")
  ;; ("f" nil "finished" :exit t))
  ;;(jake/leader-key
  ;;  "ts" '(hydra-text-scale/body :which-key "scale text"))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* Ivy, Counsel, Swiper

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-l" . ivy-done)
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init (ivy-rich-mode 1))

(use-package counsel
  :after ivy
  :config (counsel-mode 1))

(use-package swiper
  :after ivy
  :general
  ("C-s" 'swiper))
#+end_src

* Helful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Theme

#+begin_src emacs-lisp

(use-package doom-themes
  :config (load-theme 'doom-one t))

(use-package doom-modeline
  :config (doom-modeline-mode 1))

(use-package all-the-icons)

#+end_src

*  Org Mode

** Basic Org Config

#+begin_src emacs-lisp

  (defun jake/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (defun jake/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . jake/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)
    (jake/org-font-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (require 'org-tempo) ;; activate with `<py` then tab

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  (defun jake/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-colum-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . jake/org-mode-visual-fill))

#+end_src
** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

** Auto-tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle config.org file on save
  (defun jake/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'jake/org-babel-tangle-config)))
#+end_src

* Move auto generated files

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file :noerror)
#+end_src
